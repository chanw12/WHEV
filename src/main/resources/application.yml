server:
  port: 8090
spring:
  profiles:
    active: dev
    include: secret
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  jackson:
    serialization:
      fail-on-empty-beans: false
  threads:
    virtual:
      enabled: true
  datasource:
    url: jdbc:h2:./db_dev;MODE=PostgreSQL
    username: sa
    password:
    driver-class-name: org.h2.Driver
#    url: jdbc:mysql://whev-prod-db.c9igsai2o2m1.ap-northeast-2.rds.amazonaws.com:3306/whev-prod-db
#    username: admin
#    password: ${custom.prod.database.password}
#    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        default_batch_fetch_size: 100
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
  security:
    oauth2:
      client:
        registration: #카카오 대한 기본적인 정보
          kakao: # OAuth2(음식주문) 해야하는 규약 EX) 롯데리아 손님 (스프링부트) / 점원 (카카오,구글,네이버)
            clientId: ON_SECRET
            scope: profile_nickname, profile_image
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: '${custom.site.backUrl}/{action}/oauth2/code/{registrationId}'
          google:
              redirect-uri: '${custom.site.backUrl}/{action}/oauth2/code/{registrationId}'
              client-name: Google
              scope: profile
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # 카카오 로그인 신청할 때 일로 보내라
            token-uri: https://kauth.kakao.com/oauth/token # 토큰 얻고 싶으면
            user-info-uri: https://kapi.kakao.com/v2/user/me #카카오의 유저정보 일로넘겨라
            user-name-attribute: id
logging:
  level:
    com.ll.EduBridge: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.orm.jdbc.bind: TRACE
    org.hibernate.orm.jdbc.extract: TRACE
    org.springframework.transaction.interceptor: TRACE
custom:
  dev:
    cookieDomain: localhost
    frontUrl: "http://${custom.dev.cookieDomain}:5173"
    backUrl: "http://${custom.dev.cookieDomain}:${server.port}"
  prod:
    cookieDomain: skwwxy.work
    frontUrl: "https://${custom.prod.cookieDomain}"
    backUrl: "https://api.${custom.prod.cookieDomain}"
  site:
    cookieDomain: "${custom.dev.cookieDomain}"
    frontUrl: "${custom.dev.frontUrl}"
    backUrl: "${custom.dev.backUrl}"
    name: whev
  jwt:
    secretKey: ON_SECRET
  accessToken:
    expirationSec: '#{60*60}'
  temp:
    dirPath: c:/temp/eb_dev/temp
  genFile:
    dirPath: /Users/chanw12/Documents/gen

payment:
  toss:
    test_client_api_key : ON_SECRET
    test_secret_key : ON_SECRET
    success_url : "${custom.dev.backUrl}/api/v1/payments/toss/success"
    fail_url : "${custom.dev.backUrl}/api/v1/payments/toss/fail"

aws:
  accessKeyId: ON_SECRET
  secretAccessKey: ON_SECRET
  region: us-east-1

google:
  apiKey: ON_SECRET