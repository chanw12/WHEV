name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/your-spring-app:latest .

      - name: Log in to DockerHub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/your-spring-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > whev.pem
          chmod 600 whev.pem
          ls -l whev.pem

      - name: Print EC2_HOST and EC2_USER
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu  # Ubuntu AMI의 기본 사용자 이름 사용
        run: |
          echo "EC2_HOST: $EC2_HOST"
          echo "EC2_USER: $EC2_USER"

      - name: SSH and deploy
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu  # Ubuntu AMI의 기본 사용자 이름 사용
        run: |
          ssh -i whev.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/your-spring-app:latest
            docker stop spring-app || true
            docker rm spring-app || true
            docker run -d --name spring-app -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/your-spring-app:latest
          EOF
