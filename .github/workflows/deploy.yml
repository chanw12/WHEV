name: Deploy to Fly.io

on:
  push:
    paths:
      - settings.gradle
      - build.gradle
      - src/**
      - fly.toml
      - Dockerfile
      - .github/workflows/deploy.yml
    branches:
      - main

jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: Build without tests
        run: ./gradlew build -x test
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          fly version
      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          APPLICATION_SECRET_YML: ${{ secrets.APPLICATION_SECRET_YML }}
        run: |

  GitHub Actions에서 application-secret.yml 파일의 모든 정보를 하나의 환경 변수로 설정하고, Fly.io에 배포할 때 이를 사용하는 방법을 설명드리겠습니다. 이 접근 방식은 환경 변수를 직접 사용하는 대신, 애플리케이션이 시작될 때 application-secret.yml 파일을 생성하여 사용하는 것입니다.
  
  1. GitHub Actions Secrets에 APPLICATION_SECRET_YML 설정
  GitHub Actions에서 APPLICATION_SECRET_YML을 비밀 값으로 설정해야 합니다. 이 값에는 application-secret.yml 파일의 내용이 포함되어 있어야 합니다.

GitHub 리포지토리 설정:
  리포지토리의 "Settings" > "Secrets and variables" > "Actions" 섹션으로 이동합니다.
  APPLICATION_SECRET_YML라는 새로운 Secret을 추가하고, 값으로 application-secret.yml 파일의 내용을 붙여넣습니다.
  2. GitHub Actions 워크플로우 파일 수정
  GitHub Actions 워크플로우 파일에서 Fly.io에 배포할 때 APPLICATION_SECRET_YML 값을 Fly.io의 환경 변수로 설정합니다.

.github/workflows/deploy.yml 파일 예시:
  yaml
  코드 복사
name: Deploy to Fly.io

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          APPLICATION_SECRET_YML: ${{ secrets.APPLICATION_SECRET_YML }}
        run: |
          echo "$APPLICATION_SECRET_YML" > application-secret.yml
          flyctl secrets set APPLICATION_SECRET_YML="$APPLICATION_SECRET_YML"
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          fly deploy --config fly.toml --remote-only
